package pages

import (
	"fmt"
	"lampa/internal/report"
	"lampa/internal/templates"
	"lampa/internal/templates/components"
	"lampa/internal/templates/icons"
	"strings"
)

templ CollectHtml(r *report.Report) {
	{{
		title := fmt.Sprintf("%s %s+%s :: Lampa Report", r.Build.AppName, r.Build.VersionName, r.Build.VersionCode)
	}}
	@HtmlPage(title) {
		@components.ReportLayout() {
			// 	<div>with { r.Context.Tool.Name } { r.Context.Tool.Version } ({ r.Context.Tool.BuildCommit })</div>
			// HEADER
			<div class="text-center space-y-2">
				// <p class="text-xl">Lampa report for</p>
				<h1 class="text-4xl tracking-wider text-gray-900 mt-8">
					<span class="font-bold">{ r.Build.AppName }</span>
					// <span class="text-2xl">
					// 	{ r.Build.VersionName }
					// 	<span class="font-thin">({ r.Build.VersionCode })</span>
					// </span>
					<p class="text-lg text-gray-600">
						Version { r.Build.VersionName }
						({ r.Build.VersionCode })
					</p>
					// <div class="text-3xl">
					// 	{ r.Build.VersionName }
					// 	<span class="">({ r.Build.VersionCode })</span>
					// </div>
				</h1>
				// <p class="text-lg text-gray-600">Version { r.Build.VersionName } ({ r.Build.VersionCode })</p>
				// <p class="text-lg text-gray-600">Lampa report</p>
				<div class="flex flex-col items-center justify-center gap-1 text-sm text-gray-500 my-8">
					<p>
						Lampa report generated
					</p>
					<p class="flex gap-1 items-center justify-center">
						on
						@icons.Calendar(4)
						{ templates.FormatGenerationTime(r.Context.GenerationTime) }
						UTC
					</p>
				</div>
				// <div class="text-gray-300">with { r.Context.Tool.Name } { r.Context.Tool.Version } ({ r.Context.Tool.BuildCommit })</div>
			</div>
			// Build section
			@components.SectionCard(components.SectionCardArg{
				Name: "Build",
				Icon: "package",
			}) {
				@components.SubSection("Application", 2) {
					@components.InfoItem("Application Id", r.Build.ApplicationId)
					@components.InfoItem("Build Variant", r.Build.BuildVariant)
					@components.InfoItem("Version Name", r.Build.VersionName)
					@components.InfoItem("Version Code", r.Build.VersionCode)
				}
				@components.Divider()
				@components.SubSection("SDK", 2) {
					@components.InfoItem("Min SDK", r.Build.MinSdkVersion)
					@components.InfoItem("Target SDK", r.Build.TargetSdkVersion)
					@components.InfoItem("Compile SDK", r.Build.CompileSdkVersion)
				}
				@components.Divider()
				@components.SubSection("Git", 2) {
					@components.InfoItem("Branch", r.Context.Git.Branch)
					@components.InfoItem("Tag", r.Context.Git.Tag)
					@components.InfoItem("Commit", r.Context.Git.Commit)
					@components.InfoItem("Commits after Tag", r.Context.Git.CommitsAfterTag)
				}
				@components.Divider()
				@components.SubSection("File", 2) {
					@components.InfoItem("Name", r.Build.AabName)
					@components.InfoItem("Size", templates.FormatFileSize(r.Build.AabSize))
					@components.InfoItem("SHA1", r.Build.AabSha1)
				}
			}
			@DependenciesSection(r)
			@components.SectionCard(components.SectionCardArg{
				Name:          "Tool",
				Icon:          "lamp",
				IsCollapsible: true,
				IsCollapsed:   true,
			}) {
				@components.SubSection("", 2) {
					@components.InfoItem("Name", r.Context.Tool.Name)
					@components.InfoItem("Tool Version", r.Context.Tool.Version)
					@components.InfoItem("Build Commit", r.Context.Tool.BuildCommit)
					@components.InfoItem("Format Version", r.Version)
					@components.InfoItem("Website", r.Context.Tool.Website)
					@components.InfoItem("Sources", r.Context.Tool.Sources)
				}
			}
		}
	}
}

templ DependenciesSection(r *report.Report) {
	@components.SectionCard(components.SectionCardArg{
		Name:        "Dependencies",
		Icon:        "blocks",
		IsCollapsed: true,
	}) {
		@components.SubSection("Compile-Time", 1) {
			{{
				deps := r.Build.Dependencies.Compile
			}}
			@components.InfoItem("Total", len(deps))
			for _, d := range deps {
				@DependencyItem(d.String())
			}
		}
	}
}

templ DependencyItem(dependency string) {
	{{
		p := strings.Split(dependency, ":")
		group := p[0]
		artefact := p[1]
		version := p[2]

		depsUrl := fmt.Sprintf("https://deps.dev/maven/%s:%s/%s/", group, artefact, version)

		color := "bg-gray-100 text-gray-600 border-gray-200"
	}}
	<div class={ "flex items-center gap-3 p-3 rounded-lg border", color }>
		@icons.Equal(4)
		<div class="flex-1">
			<div class="font-medium text-sm flex items-center gap-2">
				{ group }:{ artefact }
				<a
					class="hover:text-orange-500"
					target="_blank"
					referrerPolicy="no-referrer"
					href={ depsUrl }
				>
					@icons.PackageSearch(4)
				</a>
			</div>
			// if dependency.FromVersion != "" {
			// 	<div class="text-xs opacity-75">
			// 		{ dependency.FromVersion } â†’ { dependency.ToVersion }
			// 	</div>
			// } else if dependency.ToVersion != "" {
			// 	<div class="text-xs opacity-75">
			// 		{ dependency.ToVersion }
			// 	</div>
			// }
			<div class="text-xs opacity-75">
				{ version }
			</div>
		</div>
	</div>
}
